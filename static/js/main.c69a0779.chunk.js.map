{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","numberOfPages","Math","ceil","pages","isFirstPage","isLastPage","className","cn","disabled","href","onClick","map","page","active","onPageNum","items","App","useState","setCurrentPage","itemsPerPage","setItemsPerPage","numberOfItems","length","firstDisplayedItem","lastDisplayedItem","visibleItems","slice","id","value","onChange","e","Number","target","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAAkC,SAAC,GAKzC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAgBC,KAAKC,KAAKN,EAAQC,GAClCM,EAAQd,EAAW,EAAGW,GACtBI,EAA8B,IAAhBN,EACdO,EAAaP,IAAgBE,EAkBnC,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAAa,CAAEC,SAAUJ,IAA3C,SACE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAxBR,WACON,GACHL,EAAaD,EAAc,IAiBzB,oBAWDK,EAAMQ,KAAI,SAAAC,GAAI,OACb,oBACEN,UAAWC,IAAG,YAAa,CAAEM,OAAQD,IAASd,IADhD,SAIE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBA3BnB,SAAmBE,GACjBb,EAAaa,GA0BUE,CAAUF,IAJ3B,SAMGA,KAREA,MAaT,oBAAIN,UAAWC,IAAG,YAAa,CAAEC,SAAUH,IAA3C,SACE,mBACE,UAAQ,WACRC,UAAU,YACVG,KAAK,QACL,gBAAeJ,EACfK,QA9CR,WACMZ,EAAcE,GAChBD,EAAaD,EAAc,IAuCzB,wBC/DFiB,EAAQ1B,EAAW,EAAG,IACzBsB,KAAI,SAAAlB,GAAC,qBAAYA,MAEPuB,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOnB,EAAP,KAAoBoB,EAApB,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KAEMC,EAAgBN,EAAMO,OACtBC,EAAqBzB,EAAcqB,EAAeA,EAAe,EACjEK,EAAoB1B,EAAcqB,EAClCM,EAAeV,EAAMW,MAAMH,EAAqB,EAAGC,GAEzD,OACE,sBAAKlB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWR,EADX,mBACiCyB,EADjC,cACyDC,EADzD,eACiFH,EADjF,OAIA,sBAAKf,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRqB,GAAG,kBACHrB,UAAU,eACVsB,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAgBW,OAAOD,EAAEE,OAAOJ,SALjD,UAOE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOK,QAAQ,kBAAkB3B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAAOyB,EACPxB,QAASsB,EACTrB,YAAaA,EACbC,aAAcmB,IAEhB,6BAEIO,EAAad,KAAI,SAACuB,GAAD,OACf,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCrDrBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c69a0779.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype TypeProps = {\n  total: number\n  perPage: number\n  currentPage: number\n  onPageChange: (page: number) => void\n};\n\nexport const Pagination: React.FC<TypeProps> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const numberOfPages = Math.ceil(total / perPage);\n  const pages = getNumbers(1, numberOfPages);\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === numberOfPages;\n\n  function showPrevPage() {\n    if (!isFirstPage) {\n      onPageChange(currentPage - 1);\n    }\n  }\n\n  function showNextPage() {\n    if (currentPage < numberOfPages) {\n      onPageChange(currentPage + 1);\n    }\n  }\n\n  function onPageNum(page: number) {\n    onPageChange(page);\n  }\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn('page-item', { disabled: isFirstPage })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPage}\n          onClick={showPrevPage}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map(page => (\n        <li\n          className={cn('page-item', { active: page === currentPage })}\n          key={page}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageNum(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li className={cn('page-item', { disabled: isLastPage })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPage}\n          onClick={showNextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n\n  const numberOfItems = items.length;\n  const firstDisplayedItem = currentPage * itemsPerPage - itemsPerPage + 1;\n  const lastDisplayedItem = currentPage * itemsPerPage;\n  const visibleItems = items.slice(firstDisplayedItem - 1, lastDisplayedItem);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstDisplayedItem} - ${lastDisplayedItem} of ${numberOfItems})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={e => setItemsPerPage(Number(e.target.value))}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={numberOfItems}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n      <ul>\n        {\n          visibleItems.map((item) => (\n            <li key={item} data-cy=\"item\">{item}</li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}